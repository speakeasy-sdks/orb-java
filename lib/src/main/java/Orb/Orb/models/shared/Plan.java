/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package Orb.Orb.models.shared;

import Orb.Orb.utils.DateTimeDeserializer;
import Orb.Orb.utils.DateTimeSerializer;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;

/**
 * Plan - OK
 */
public class Plan {
    /**
     * The parent plan id if the given plan was created by overriding one or more of the parent's prices
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("base_plan_id")
    public String basePlanId;
    public Plan withBasePlanId(String basePlanId) {
        this.basePlanId = basePlanId;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public Plan withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * An ISO 4217 currency string or custom pricing unit (`credits`) for this plan's prices.
     */
    @JsonProperty("currency")
    public String currency;
    public Plan withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    @JsonProperty("description")
    public String description;
    public Plan withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonProperty("discount")
    public java.util.Map<String, Object> discount;
    public Plan withDiscount(java.util.Map<String, Object> discount) {
        this.discount = discount;
        return this;
    }
    
    /**
     * An optional user-defined ID for this plan resource, used throughout the system as an alias for this Plan. Use this field to identify a plan by an existing identifier in your system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_plan_id")
    public String externalPlanId;
    public Plan withExternalPlanId(String externalPlanId) {
        this.externalPlanId = externalPlanId;
        return this;
    }
    
    @JsonProperty("id")
    public String id;
    public Plan withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * An ISO 4217 currency string for which this plan is billed in. Matches `currency` unless `currency` is a custom pricing unit.
     */
    @JsonProperty("invoicing_currency")
    public String invoicingCurrency;
    public Plan withInvoicingCurrency(String invoicingCurrency) {
        this.invoicingCurrency = invoicingCurrency;
        return this;
    }
    
    @JsonProperty("minimum")
    public java.util.Map<String, Object> minimum;
    public Plan withMinimum(java.util.Map<String, Object> minimum) {
        this.minimum = minimum;
        return this;
    }
    
    @JsonProperty("name")
    public String name;
    public Plan withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plan_phases")
    public PlanPhase[] planPhases;
    public Plan withPlanPhases(PlanPhase[] planPhases) {
        this.planPhases = planPhases;
        return this;
    }
    
    /**
     * Prices for this plan. If the plan has phases, this includes prices across all phases of the plan. 
     */
    @JsonProperty("prices")
    public Price[] prices;
    public Plan withPrices(Price[] prices) {
        this.prices = prices;
        return this;
    }
    
    @JsonProperty("product")
    public PlanProduct product;
    public Plan withProduct(PlanProduct product) {
        this.product = product;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trial_config")
    public PlanTrialConfig trialConfig;
    public Plan withTrialConfig(PlanTrialConfig trialConfig) {
        this.trialConfig = trialConfig;
        return this;
    }
    
}

/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package Orb.Orb.models.shared;

import Orb.Orb.utils.DateTimeDeserializer;
import Orb.Orb.utils.DateTimeSerializer;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;

public class InvoiceLineItems {
    /**
     * The final amount after any discounts or minimums.
     */
    @JsonProperty("amount")
    public String amount;
    public InvoiceLineItems withAmount(String amount) {
        this.amount = amount;
        return this;
    }
    
    @JsonProperty("discount")
    public java.util.Map<String, Object> discount;
    public InvoiceLineItems withDiscount(java.util.Map<String, Object> discount) {
        this.discount = discount;
        return this;
    }
    
    /**
     * The end date of the range of time applied for this line item's price.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("end_date")
    public OffsetDateTime endDate;
    public InvoiceLineItems withEndDate(OffsetDateTime endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * For configured prices that are split by a grouping key, this will be populated with the key and a value. The `amount` and `subtotal` will be the values for this particular grouping.
     */
    @JsonProperty("grouping")
    public InvoiceLineItemsGrouping grouping;
    public InvoiceLineItems withGrouping(InvoiceLineItemsGrouping grouping) {
        this.grouping = grouping;
        return this;
    }
    
    @JsonProperty("minimum")
    public java.util.Map<String, Object> minimum;
    public InvoiceLineItems withMinimum(java.util.Map<String, Object> minimum) {
        this.minimum = minimum;
        return this;
    }
    
    /**
     * The name of the price associated with this line item.
     */
    @JsonProperty("name")
    public String name;
    public InvoiceLineItems withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonProperty("quantity")
    public Double quantity;
    public InvoiceLineItems withQuantity(Double quantity) {
        this.quantity = quantity;
        return this;
    }
    
    /**
     * The start date of the range of time applied for this line item's price.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("start_date")
    public OffsetDateTime startDate;
    public InvoiceLineItems withStartDate(OffsetDateTime startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * For complex pricing structures, the line item can be broken down further in `sub_line_items`.
     */
    @JsonProperty("sub_line_items")
    public InvoiceLineItemsSubLineItems[] subLineItems;
    public InvoiceLineItems withSubLineItems(InvoiceLineItemsSubLineItems[] subLineItems) {
        this.subLineItems = subLineItems;
        return this;
    }
    
    /**
     * The line amount before any line item-specific discounts or minimums.
     */
    @JsonProperty("subtotal")
    public String subtotal;
    public InvoiceLineItems withSubtotal(String subtotal) {
        this.subtotal = subtotal;
        return this;
    }
    
    /**
     * An array of tax rates and their incurred tax amounts. Empty if no tax integration is configured.
     */
    @JsonProperty("tax_amounts")
    public InvoiceLineItemsTaxAmounts[] taxAmounts;
    public InvoiceLineItems withTaxAmounts(InvoiceLineItemsTaxAmounts[] taxAmounts) {
        this.taxAmounts = taxAmounts;
        return this;
    }
    
}

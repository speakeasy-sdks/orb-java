/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package Orb.Orb.models.shared;

import Orb.Orb.utils.DateTimeDeserializer;
import Orb.Orb.utils.DateTimeSerializer;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;

/**
 * Customer - A customer is a buyer of your products, and the other party to the billing relationship.
 * 
 * In Orb, customers are assigned system generated identifiers automatically, but it's often desirable to have these match existing identifiers in your system. To avoid having to denormalize Orb ID information, you can pass in an `external_customer_id` with your own identifier. See [Customer ID Aliases](../docs/Customer-ID-Aliases.md) for further information about how these aliases work in Orb.
 * 
 * In addition to having an identifier in your system, a customer may exist in a payment provider solution like Stripe. Use the `payment_provider_id` and the `payment_provider` enum field to express this mapping.
 * 
 * A customer also has a timezone (from the standard [IANA timezone database](https://www.iana.org/time-zones)), which defaults to your account's timezone. See [Timezone localization](../docs/Timezone-localization.md) for information on what this timezone parameter influences within Orb.
 */
public class Customer {
    /**
     * The customer's current balance in their currency.
     */
    @JsonProperty("balance")
    public String balance;

    public Customer withBalance(String balance) {
        this.balance = balance;
        return this;
    }
    
    /**
     * The customer's billing address; all fields in the address are optional. This address appears on customer invoices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_address")
    public CustomerBillingAddress billingAddress;

    public Customer withBillingAddress(CustomerBillingAddress billingAddress) {
        this.billingAddress = billingAddress;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public Customer withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * An ISO 4217 currency string used for the customer's invoices and balance.
     */
    @JsonProperty("currency")
    public String currency;

    public Customer withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * A valid customer email, to be used for notifications. When Orb triggers payment through a payment gateway, this email will be used for any automatically issued receipts.
     */
    @JsonProperty("email")
    public String email;

    public Customer withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * An optional user-defined ID for this customer resource, used throughout the system as an alias for this Customer. Use this field to identify a customer by an existing identifier in your system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_customer_id")
    public String externalCustomerId;

    public Customer withExternalCustomerId(String externalCustomerId) {
        this.externalCustomerId = externalCustomerId;
        return this;
    }
    
    /**
     * The full name of the customer
     */
    @JsonProperty("id")
    public String id;

    public Customer withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonProperty("name")
    public String name;

    public Customer withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The external payments or invoicing solution connected to this customer.
     */
    @JsonProperty("payment_provider")
    public CustomerPaymentProvider paymentProvider;

    public Customer withPaymentProvider(CustomerPaymentProvider paymentProvider) {
        this.paymentProvider = paymentProvider;
        return this;
    }
    
    /**
     * The ID of this customer in an external payments solution, such as Stripe. This is used for creating charges or invoices in the external system via Orb.
     */
    @JsonProperty("payment_provider_id")
    public String paymentProviderId;

    public Customer withPaymentProviderId(String paymentProviderId) {
        this.paymentProviderId = paymentProviderId;
        return this;
    }
    
    /**
     * The customer's shipping address; all fields in the address are optional. Note that downstream tax calculations are based on the shipping address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_address")
    public CustomerShippingAddress shippingAddress;

    public Customer withShippingAddress(CustomerShippingAddress shippingAddress) {
        this.shippingAddress = shippingAddress;
        return this;
    }
    
    /**
     * A timezone identifier from the IANA timezone database, such as "America/Los_Angeles". This defaults to your account's timezone if not set. This cannot be changed after customer creation.
     */
    @JsonProperty("timezone")
    public String timezone;

    public Customer withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    public Customer(@JsonProperty("balance") String balance, @JsonProperty("created_at") OffsetDateTime createdAt, @JsonProperty("currency") String currency, @JsonProperty("email") String email, @JsonProperty("id") String id, @JsonProperty("name") String name, @JsonProperty("payment_provider") CustomerPaymentProvider paymentProvider, @JsonProperty("payment_provider_id") String paymentProviderId, @JsonProperty("timezone") String timezone) {
        this.balance = balance;
        this.createdAt = createdAt;
        this.currency = currency;
        this.email = email;
        this.id = id;
        this.name = name;
        this.paymentProvider = paymentProvider;
        this.paymentProviderId = paymentProviderId;
        this.timezone = timezone;
  }
}

/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package Orb.Orb.models.shared;

import Orb.Orb.utils.DateTimeDeserializer;
import Orb.Orb.utils.DateTimeSerializer;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;

public class CreditNote {
    /**
     * The creation time of the resource in Orb.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public CreditNote withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The unique identifier for credit notes.
     */
    @JsonProperty("credit_note_number")
    public String creditNoteNumber;

    public CreditNote withCreditNoteNumber(String creditNoteNumber) {
        this.creditNoteNumber = creditNoteNumber;
        return this;
    }
    
    /**
     * A URL to a PDF version of this credit note.
     */
    @JsonProperty("credit_note_pdf")
    public String creditNotePdf;

    public CreditNote withCreditNotePdf(String creditNotePdf) {
        this.creditNotePdf = creditNotePdf;
        return this;
    }
    
    /**
     * The Customer who is receiving this credit note.
     */
    @JsonProperty("customer")
    public CreditNoteCustomer customer;

    public CreditNote withCustomer(CreditNoteCustomer customer) {
        this.customer = customer;
        return this;
    }
    
    /**
     * Any discounts applied on the original invoice.
     */
    @JsonProperty("discounts")
    public Discount[] discounts;

    public CreditNote withDiscounts(Discount[] discounts) {
        this.discounts = discounts;
        return this;
    }
    
    /**
     * The unique id of this credit note.
     */
    @JsonProperty("id")
    public String id;

    public CreditNote withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The Invoice resource that this credit note is applied to.
     */
    @JsonProperty("invoice_id")
    public String invoiceId;

    public CreditNote withInvoiceId(String invoiceId) {
        this.invoiceId = invoiceId;
        return this;
    }
    
    /**
     * All of the line items associated with this credit note
     */
    @JsonProperty("line_items")
    public CreditNoteLineItem[] lineItems;

    public CreditNote withLineItems(CreditNoteLineItem[] lineItems) {
        this.lineItems = lineItems;
        return this;
    }
    
    /**
     * An optional memo supplied on the credit note.
     */
    @JsonProperty("memo")
    public String memo;

    public CreditNote withMemo(String memo) {
        this.memo = memo;
        return this;
    }
    
    /**
     * Any credited amount from the applied minimum on the invoice.
     */
    @JsonProperty("minimum_amount_refunded")
    public String minimumAmountRefunded;

    public CreditNote withMinimumAmountRefunded(String minimumAmountRefunded) {
        this.minimumAmountRefunded = minimumAmountRefunded;
        return this;
    }
    
    /**
     * A reason for this credit note, which can be one of "Duplicate", "Fraudulent", "Order change", "Product unsatisfactory"
     */
    @JsonProperty("reason")
    public CreditNoteReason reason;

    public CreditNote withReason(CreditNoteReason reason) {
        this.reason = reason;
        return this;
    }
    
    /**
     * The total prior to any creditable invoice-level discounts or minimums
     */
    @JsonProperty("subtotal")
    public String subtotal;

    public CreditNote withSubtotal(String subtotal) {
        this.subtotal = subtotal;
        return this;
    }
    
    /**
     * The total including creditable invoice-level discounts or minimums, and tax
     */
    @JsonProperty("total")
    public String total;

    public CreditNote withTotal(String total) {
        this.total = total;
        return this;
    }
    
    /**
     * Describing if this is an `adjustment` or a `refund` 
     */
    @JsonProperty("type")
    public CreditNoteType type;

    public CreditNote withType(CreditNoteType type) {
        this.type = type;
        return this;
    }
    
    /**
     * The time when the credit note was voided in Orb, if applicable.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("voided_at")
    public OffsetDateTime voidedAt;

    public CreditNote withVoidedAt(OffsetDateTime voidedAt) {
        this.voidedAt = voidedAt;
        return this;
    }
    
    public CreditNote(@JsonProperty("created_at") OffsetDateTime createdAt, @JsonProperty("credit_note_number") String creditNoteNumber, @JsonProperty("credit_note_pdf") String creditNotePdf, @JsonProperty("customer") CreditNoteCustomer customer, @JsonProperty("discounts") Discount[] discounts, @JsonProperty("id") String id, @JsonProperty("invoice_id") String invoiceId, @JsonProperty("line_items") CreditNoteLineItem[] lineItems, @JsonProperty("memo") String memo, @JsonProperty("minimum_amount_refunded") String minimumAmountRefunded, @JsonProperty("reason") CreditNoteReason reason, @JsonProperty("subtotal") String subtotal, @JsonProperty("total") String total, @JsonProperty("type") CreditNoteType type, @JsonProperty("voided_at") OffsetDateTime voidedAt) {
        this.createdAt = createdAt;
        this.creditNoteNumber = creditNoteNumber;
        this.creditNotePdf = creditNotePdf;
        this.customer = customer;
        this.discounts = discounts;
        this.id = id;
        this.invoiceId = invoiceId;
        this.lineItems = lineItems;
        this.memo = memo;
        this.minimumAmountRefunded = minimumAmountRefunded;
        this.reason = reason;
        this.subtotal = subtotal;
        this.total = total;
        this.type = type;
        this.voidedAt = voidedAt;
  }
}

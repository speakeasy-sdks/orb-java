/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package Orb.Orb.models.shared;

import Orb.Orb.utils.DateTimeDeserializer;
import Orb.Orb.utils.DateTimeSerializer;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;

/**
 * Price - Orb supports a few different pricing models out of the box. Each of these models is serialized differently in a given Price object. The model_type field determines the key for the configuration object that is present.
 * 
 * ## Unit pricing
 * With unit pricing, each unit costs a fixed amount.
 * ```json
 * {
 *     ...
 *     "model_type": "unit",
 *     "unit_config": {
 *         "unit_amount": "0.50"
 *     }
 *     ...
 * }
 * ```
 * 
 * ## Tiered pricing
 * In tiered pricing, the cost of a given unit depends on the tier range that it falls into, where each tier range is defined by an upper and lower bound. For example, the first ten units may cost $0.50 each and all units thereafter may cost $0.10 each.
 * ```json
 * {
 *     ...
 *     "model_type": "tiered",
 *     "tiered_config": {
 *         "tiers": [ 
 *            {
 *                 "first_unit": 1,
 *                 "last_unit": 10,
 *                 "unit_amount": "0.50"
 *             },
 *             {
 *                 "first_unit": 11,
 *                 "last_unit": null,
 *                 "unit_amount": "0.10"
 *             }
 *         ]
 *     }
 *     ...
 * }
 * ```
 * 
 * ## Bulk pricing
 * Bulk pricing applies when the number of units determine the cost of all units. For example, if you've bought less than 10 units, they may each be $0.50 for a total of $5.00. Once you've bought more than 10 units, all units may now be priced at $0.40 (i.e. 101 units total would be $40.40).
 * ```json
 * {
 *     ...
 *     "model_type": "bulk",
 *     "bulk_config": {
 *         "tiers": [ 
 *             {
 *                 "maximum_units": 10,
 *                 "unit_amount": "0.50"
 *             },
 *             {
 *                 "maximum_units": 1000,
 *                 "unit_amount": "0.40"
 *             }
 *           ]
 *     }
 *     ...
 * }
 * ```
 * 
 * ## Package pricing
 * Package pricing defines the size or granularity of a unit for billing purposes. For example, if the package size is set to 5, then 4 units will be billed as 5 and 6 units will be billed at 10.
 * ```json
 * {
 *     ...
 *     "model_type": "package",
 *     "package_config": {
 *        "package_amount": "0.80",
 *        "package_size": 10
 *     }
 *     ...
 *  }
 * ```
 * 
 * ## BPS pricing
 * BPS pricing specifies a per-event (e.g. per-payment) rate in one hundredth of a percent (the number of basis points to charge), as well as a cap per event to assess. For example, this would allow you to assess a fee of 0.25% on every payment you process, with a maximum charge of $25 per payment.
 * ```json
 * {
 *     ...
 *     "model_type": "bps",
 *     "bps_config": {
 *        "bps": 125,
 *        "per_unit_maximum": "11.00"
 *     }
 *     ...
 *  }
 * ```
 * 
 * ## Bulk BPS pricing
 * Bulk BPS pricing specifies BPS parameters in a tiered manner, dependent on the total quantity across all events. Similar to bulk pricing, the BPS parameters of a given event depends on the tier range that the billing period falls into. Each tier range is defined by an upper bound. For example, after $1.5M of payment volume is reached, each individual payment may have a lower cap or a smaller take-rate.
 * ```json
 *     ...
 *     "model_type": "bulk_bps",
 *     "bulk_bps_config": {
 *         "tiers": [ 
 *            {
 *                 "maximum_amount": "1000000.00",
 *                 "bps": 125,
 *                 "per_unit_maximum": "19.00"
 *            },
 *           {
 *                 "maximum_amount": null,
 *                 "bps": 115,
 *                 "per_unit_maximum": "4.00"
 *             }
 *         ]
 *     }
 *     ...
 * }
 * ```
 * 
 * ## Tiered BPS pricing
 * Tiered BPS pricing specifies BPS parameters in a graduated manner, where an event's applicable parameter is a function of its marginal addition to the period total. Similar to tiered pricing, the BPS parameters of a given event depends on the tier range that it falls into, where each tier range is defined by an upper and lower bound. For example, the first few payments may have a 0.8 BPS take-rate and all payments after a specific volume may incur a take-rate of 0.5 BPS each.
 * ```json
 *     ...
 *     "model_type": "tiered_bps",
 *     "tiered_bps_config": {
 *         "tiers": [ 
 *            {
 *                 "minimum_amount": "0",
 *                 "maximum_amount": "1000000.00",
 *                 "bps": 125,
 *                 "per_unit_maximum": "19.00"
 *            },
 *           {
 *                 "minimum_amount": "1000000.00",
 *                 "maximum_amount": null,
 *                 "bps": 115,
 *                 "per_unit_maximum": "4.00"
 *             }
 *         ]
 *     }
 *     ...
 * }
 * ```
 * 
 * ## Matrix pricing
 * Matrix pricing defines a set of unit prices in a one or two-dimensional matrix. `dimensions` defines the two event property values evaluated in this pricing model. In a one-dimensional matrix, the second value is `null`. Every configuration has a list of `matrix_values` which give the unit prices for specified property values. In a one-dimensional matrix, the matrix values will have `dimension_values` where the second value of the pair is null. If an event does not match any of the dimension values in the matrix, it will resort to the `default_unit_amount`.
 * ```json
 * ...
 * "model_type": "matrix"
 * "matrix_config": {
 *     "default_unit_amount": "3.00",
 *     "dimensions": [
 *         "cluster_name",
 *         "region"
 *     ],
 *     "matrix_values": [
 *         {
 *             "dimension_values": [
 *                 "alpha",
 *                 "west"
 *             ],
 *             "unit_amount": "2.00"
 *         },
 *         ...
 *     ]
 * }
 * ...
 * ```
 * 
 * ### Fixed fees
 * Fixed fees are prices that are applied independent of usage quantites, and follow unit pricing. They also have an additional parameter `fixed_price_quantity`. If the Price represents a fixed cost, this represents the quantity of units applied.
 * ```json
 * {
 *     ...
 *     "id": "price_id",
 *     "model_type": "unit",
 *     "unit_config": {
 *        "unit_amount": "2.00"
 *     },
 *     "fixed_price_quantity": 3.0
 *     ...
 * }
 * ```
 * 
 */
public class Price {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billable_metric")
    public PriceBillableMetric billableMetric;

    public Price withBillableMetric(PriceBillableMetric billableMetric) {
        this.billableMetric = billableMetric;
        return this;
    }
    
    /**
     * Provided when model_type is `bps`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bps_config")
    public PriceBpsConfig bpsConfig;

    public Price withBpsConfig(PriceBpsConfig bpsConfig) {
        this.bpsConfig = bpsConfig;
        return this;
    }
    
    /**
     * Provided when model_type is `bulk_bps`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bulk_bps_config")
    public PriceBulkBpsConfig bulkBpsConfig;

    public Price withBulkBpsConfig(PriceBulkBpsConfig bulkBpsConfig) {
        this.bulkBpsConfig = bulkBpsConfig;
        return this;
    }
    
    /**
     * Provided when model_type is `bulk`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bulk_config")
    public PriceBulkConfig bulkConfig;

    public Price withBulkConfig(PriceBulkConfig bulkConfig) {
        this.bulkConfig = bulkConfig;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cadence")
    public PriceCadence cadence;

    public Price withCadence(PriceCadence cadence) {
        this.cadence = cadence;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public Price withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * An ISO 4217 currency string for this plan's prices.
     */
    @JsonProperty("currency")
    public String currency;

    public Price withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    @JsonProperty("discount")
    public java.util.Map<String, Object> discount;

    public Price withDiscount(java.util.Map<String, Object> discount) {
        this.discount = discount;
        return this;
    }
    
    /**
     * If the Price represents a fixed cost, this represents the quantity of units applied. Mutually exclusive with billable_metric.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fixed_price_quantity")
    public Double fixedPriceQuantity;

    public Price withFixedPriceQuantity(Double fixedPriceQuantity) {
        this.fixedPriceQuantity = fixedPriceQuantity;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Price withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Provided when model_type is `matrix`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matrix_config")
    public PriceMatrixConfig matrixConfig;

    public Price withMatrixConfig(PriceMatrixConfig matrixConfig) {
        this.matrixConfig = matrixConfig;
        return this;
    }
    
    @JsonProperty("minimum")
    public java.util.Map<String, Object> minimum;

    public Price withMinimum(java.util.Map<String, Object> minimum) {
        this.minimum = minimum;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model_type")
    public PriceModelType modelType;

    public Price withModelType(PriceModelType modelType) {
        this.modelType = modelType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Price withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Provided when model_type is `package`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("package_config")
    public PricePackageConfig packageConfig;

    public Price withPackageConfig(PricePackageConfig packageConfig) {
        this.packageConfig = packageConfig;
        return this;
    }
    
    /**
     * The phase order which includes this price, only applicable to a plan with phases.
     */
    @JsonProperty("plan_phase_order")
    public Double planPhaseOrder;

    public Price withPlanPhaseOrder(Double planPhaseOrder) {
        this.planPhaseOrder = planPhaseOrder;
        return this;
    }
    
    /**
     * Provided when model_type is `tiered_bps`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tiered_bps_config")
    public PriceTieredBpsConfig tieredBpsConfig;

    public Price withTieredBpsConfig(PriceTieredBpsConfig tieredBpsConfig) {
        this.tieredBpsConfig = tieredBpsConfig;
        return this;
    }
    
    /**
     * Provided when model_type is`tiered`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tiered_config")
    public PriceTieredConfig tieredConfig;

    public Price withTieredConfig(PriceTieredConfig tieredConfig) {
        this.tieredConfig = tieredConfig;
        return this;
    }
    
    /**
     * Provided when model_type is `unit`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit_config")
    public PriceUnitConfig unitConfig;

    public Price withUnitConfig(PriceUnitConfig unitConfig) {
        this.unitConfig = unitConfig;
        return this;
    }
    
    public Price(@JsonProperty("currency") String currency, @JsonProperty("discount") java.util.Map<String, Object> discount, @JsonProperty("minimum") java.util.Map<String, Object> minimum, @JsonProperty("plan_phase_order") Double planPhaseOrder) {
        this.currency = currency;
        this.discount = discount;
        this.minimum = minimum;
        this.planPhaseOrder = planPhaseOrder;
  }
}

/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package Orb.Orb.models.shared;

import Orb.Orb.utils.DateTimeDeserializer;
import Orb.Orb.utils.DateTimeSerializer;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;

/**
 * Backfill - A backfill represents an update to historical usage data, adding or replacing events in a timeframe.
 */
public class Backfill {
    /**
     * If in the future, the time at which the backfill will automatically close. If in the past, the time at which the backfill was closed.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("close_time")
    public OffsetDateTime closeTime;

    public Backfill withCloseTime(OffsetDateTime closeTime) {
        this.closeTime = closeTime;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public Backfill withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The customer ID this backfill is scoped to. If null, this backfill is not scoped to a single customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    public String customerId;

    public Backfill withCustomerId(String customerId) {
        this.customerId = customerId;
        return this;
    }
    
    @JsonProperty("id")
    public String id;

    public Backfill withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The time at which this backfill was reverted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("reverted_at")
    public OffsetDateTime revertedAt;

    public Backfill withRevertedAt(OffsetDateTime revertedAt) {
        this.revertedAt = revertedAt;
        return this;
    }
    
    /**
     * The status of the backfill.
     */
    @JsonProperty("status")
    public BackfillStatus status;

    public Backfill withStatus(BackfillStatus status) {
        this.status = status;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("timeframe_end")
    public OffsetDateTime timeframeEnd;

    public Backfill withTimeframeEnd(OffsetDateTime timeframeEnd) {
        this.timeframeEnd = timeframeEnd;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("timeframe_start")
    public OffsetDateTime timeframeStart;

    public Backfill withTimeframeStart(OffsetDateTime timeframeStart) {
        this.timeframeStart = timeframeStart;
        return this;
    }
    
    public Backfill(@JsonProperty("close_time") OffsetDateTime closeTime, @JsonProperty("created_at") OffsetDateTime createdAt, @JsonProperty("id") String id, @JsonProperty("status") BackfillStatus status, @JsonProperty("timeframe_end") OffsetDateTime timeframeEnd, @JsonProperty("timeframe_start") OffsetDateTime timeframeStart) {
        this.closeTime = closeTime;
        this.createdAt = createdAt;
        this.id = id;
        this.status = status;
        this.timeframeEnd = timeframeEnd;
        this.timeframeStart = timeframeStart;
  }
}

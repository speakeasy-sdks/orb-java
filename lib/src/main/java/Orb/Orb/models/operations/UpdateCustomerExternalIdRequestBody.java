/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package Orb.Orb.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UpdateCustomerExternalIdRequestBody {
    /**
     * The customer's billing address; all fields in the address are optional. This address appears on customer invoices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_address")
    public Orb.Orb.models.shared.BillingAddress billingAddress;

    public UpdateCustomerExternalIdRequestBody withBillingAddress(Orb.Orb.models.shared.BillingAddress billingAddress) {
        this.billingAddress = billingAddress;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;

    public UpdateCustomerExternalIdRequestBody withEmail(String email) {
        this.email = email;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public UpdateCustomerExternalIdRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * This is used for creating charges or invoices in an external system via Orb. When not in test mode:
     * - the connection must first be configured in the Orb webapp. 
     * - if the provider is an invoicing provider (`stripe_invoice`, `quickbooks`, `bill.com`), any product mappings must first be configured with the Orb team.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_provider")
    public UpdateCustomerExternalIdRequestBodyPaymentProvider paymentProvider;

    public UpdateCustomerExternalIdRequestBody withPaymentProvider(UpdateCustomerExternalIdRequestBodyPaymentProvider paymentProvider) {
        this.paymentProvider = paymentProvider;
        return this;
    }
    
    /**
     * The ID of this customer in an external payments solution, such as Stripe. This is used for creating charges or invoices in the external system via Orb.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_provider_id")
    public String paymentProviderId;

    public UpdateCustomerExternalIdRequestBody withPaymentProviderId(String paymentProviderId) {
        this.paymentProviderId = paymentProviderId;
        return this;
    }
    
    /**
     * The customer's shipping address; all fields in the address are optional. Note that downstream tax calculations are based on the shipping address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_address")
    public Orb.Orb.models.shared.ShippingAddress shippingAddress;

    public UpdateCustomerExternalIdRequestBody withShippingAddress(Orb.Orb.models.shared.ShippingAddress shippingAddress) {
        this.shippingAddress = shippingAddress;
        return this;
    }
    
    public UpdateCustomerExternalIdRequestBody(){}
}

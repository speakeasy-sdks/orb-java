/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package Orb.Orb.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

public class CreateSubscriptionApplicationJSON {
    /**
     * Align billing periods with the subscription's start_date. If this is not provided, this defaults to aligning billing periods with the start of the month.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("align_billing_with_subscription_start_date")
    public Boolean alignBillingWithSubscriptionStartDate;

    public CreateSubscriptionApplicationJSON withAlignBillingWithSubscriptionStartDate(Boolean alignBillingWithSubscriptionStartDate) {
        this.alignBillingWithSubscriptionStartDate = alignBillingWithSubscriptionStartDate;
        return this;
    }
    
    /**
     * Used to determine whether Orb will attempt to automatically charge the payment method on file for the customer corresponding to this subscription. If not provided, the property on the corresponding customer will be honored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_collection")
    public Boolean autoCollection;

    public CreateSubscriptionApplicationJSON withAutoCollection(Boolean autoCollection) {
        this.autoCollection = autoCollection;
        return this;
    }
    
    /**
     * Redemption code to be used for this subscription. If the coupon cannot be found by its redemption code, or cannot be redeemed, an error response will be returned and the plan change will not be scheduled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coupon_redemption_code")
    public String couponRedemptionCode;

    public CreateSubscriptionApplicationJSON withCouponRedemptionCode(String couponRedemptionCode) {
        this.couponRedemptionCode = couponRedemptionCode;
        return this;
    }
    
    /**
     * The ID of the customer to subscribe.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    public String customerId;

    public CreateSubscriptionApplicationJSON withCustomerId(String customerId) {
        this.customerId = customerId;
        return this;
    }
    
    /**
     * Invoices for this subscription will populate with this memo. When not set, the plan-level setting for memo will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_invoice_memo")
    public String defaultInvoiceMemo;

    public CreateSubscriptionApplicationJSON withDefaultInvoiceMemo(String defaultInvoiceMemo) {
        this.defaultInvoiceMemo = defaultInvoiceMemo;
        return this;
    }
    
    /**
     * The external ID of the customer to subscribe, as an alternate to passing the `customer_id`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_customer_id")
    public String externalCustomerId;

    public CreateSubscriptionApplicationJSON withExternalCustomerId(String externalCustomerId) {
        this.externalCustomerId = externalCustomerId;
        return this;
    }
    
    /**
     * Optionally provide the name of the external marketplace that the subscription is attached to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_marketplace")
    public CreateSubscriptionApplicationJSONExternalMarketplace externalMarketplace;

    public CreateSubscriptionApplicationJSON withExternalMarketplace(CreateSubscriptionApplicationJSONExternalMarketplace externalMarketplace) {
        this.externalMarketplace = externalMarketplace;
        return this;
    }
    
    /**
     * The reporting ID to associate this subscription with the external marketplace. Required if external_marketplace is specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_marketplace_reporting_id")
    public String externalMarketplaceReportingId;

    public CreateSubscriptionApplicationJSON withExternalMarketplaceReportingId(String externalMarketplaceReportingId) {
        this.externalMarketplaceReportingId = externalMarketplaceReportingId;
        return this;
    }
    
    /**
     * The external ID of the plan, which can be used in place of the `plan_id`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_plan_id")
    public String externalPlanId;

    public CreateSubscriptionApplicationJSON withExternalPlanId(String externalPlanId) {
        this.externalPlanId = externalPlanId;
        return this;
    }
    
    /**
     * User-specified key value pairs, often useful for referencing internal resources or IDs. Returned as-is in the subscription resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, Object> metadata;

    public CreateSubscriptionApplicationJSON withMetadata(java.util.Map<String, Object> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * The subscription's override minimum amount for the plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimum_amount")
    public String minimumAmount;

    public CreateSubscriptionApplicationJSON withMinimumAmount(String minimumAmount) {
        this.minimumAmount = minimumAmount;
        return this;
    }
    
    /**
     * The net terms of a subscription determine when a subscription's invoice is due relative to its issue date. Whereas a net terms of 0 signifies "due on issue", a net terms of 30 can be used to provide the customer one month to pay the invoice. By default, the subscription defaults to the plan's net terms configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_terms")
    public Long netTerms;

    public CreateSubscriptionApplicationJSON withNetTerms(Long netTerms) {
        this.netTerms = netTerms;
        return this;
    }
    
    /**
     * Optionally provide a list of minimum amount or discount overrides for phases on the plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phase_overrides")
    public CreateSubscriptionApplicationJSONPhaseOverrides[] phaseOverrides;

    public CreateSubscriptionApplicationJSON withPhaseOverrides(CreateSubscriptionApplicationJSONPhaseOverrides[] phaseOverrides) {
        this.phaseOverrides = phaseOverrides;
        return this;
    }
    
    /**
     * The plan that the given customer should be subscribed to. The plan determines the pricing and cadence of the subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plan_id")
    public String planId;

    public CreateSubscriptionApplicationJSON withPlanId(String planId) {
        this.planId = planId;
        return this;
    }
    
    /**
     * Optionally provide a list of overrides for prices on the plan
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price_overrides")
    public Object[] priceOverrides;

    public CreateSubscriptionApplicationJSON withPriceOverrides(Object[] priceOverrides) {
        this.priceOverrides = priceOverrides;
        return this;
    }
    
    /**
     * The date that Orb should start billing for the subscription, localized to the customer's timezone. If this is not provided, this defaults to the current date in the customer's timezone.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("start_date")
    public LocalDate startDate;

    public CreateSubscriptionApplicationJSON withStartDate(LocalDate startDate) {
        this.startDate = startDate;
        return this;
    }
    
    public CreateSubscriptionApplicationJSON(){}
}

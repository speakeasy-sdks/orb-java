/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package Orb.Orb.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

public class PostSubscriptionsRequestBody {
    /**
     * Align billing periods with the subscription's start_date. If this is not provided, this defaults to aligning billing periods with the start of the month.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("align_billing_with_subscription_start_date")
    public Boolean alignBillingWithSubscriptionStartDate;
    public PostSubscriptionsRequestBody withAlignBillingWithSubscriptionStartDate(Boolean alignBillingWithSubscriptionStartDate) {
        this.alignBillingWithSubscriptionStartDate = alignBillingWithSubscriptionStartDate;
        return this;
    }
    
    /**
     * The ID of the customer to subscribe.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    public String customerId;
    public PostSubscriptionsRequestBody withCustomerId(String customerId) {
        this.customerId = customerId;
        return this;
    }
    
    /**
     * The external ID of the customer to subscribe, as an alternate to passing the `customer_id`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_customer_id")
    public String externalCustomerId;
    public PostSubscriptionsRequestBody withExternalCustomerId(String externalCustomerId) {
        this.externalCustomerId = externalCustomerId;
        return this;
    }
    
    /**
     * Optionally provide the name of the external marketplace that the subscription is attached to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_marketplace")
    public PostSubscriptionsRequestBodyExternalMarketplaceEnum externalMarketplace;
    public PostSubscriptionsRequestBody withExternalMarketplace(PostSubscriptionsRequestBodyExternalMarketplaceEnum externalMarketplace) {
        this.externalMarketplace = externalMarketplace;
        return this;
    }
    
    /**
     * The reporting ID to associate this subscription with the external marketplace. Required if external_marketplace is specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_marketplace_reporting_id")
    public String externalMarketplaceReportingId;
    public PostSubscriptionsRequestBody withExternalMarketplaceReportingId(String externalMarketplaceReportingId) {
        this.externalMarketplaceReportingId = externalMarketplaceReportingId;
        return this;
    }
    
    /**
     * The external ID of the plan, which can be used in place of the `plan_id`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_plan_id")
    public String externalPlanId;
    public PostSubscriptionsRequestBody withExternalPlanId(String externalPlanId) {
        this.externalPlanId = externalPlanId;
        return this;
    }
    
    /**
     * The subscription's override minimum amount for the plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimum_amount")
    public String minimumAmount;
    public PostSubscriptionsRequestBody withMinimumAmount(String minimumAmount) {
        this.minimumAmount = minimumAmount;
        return this;
    }
    
    /**
     * Optionally provide a list of minimum amount or discount overrides for phases on the plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phase_overrides")
    public PostSubscriptionsRequestBodyPhaseOverrides[] phaseOverrides;
    public PostSubscriptionsRequestBody withPhaseOverrides(PostSubscriptionsRequestBodyPhaseOverrides[] phaseOverrides) {
        this.phaseOverrides = phaseOverrides;
        return this;
    }
    
    /**
     * The plan that the given customer should be subscribed to. The plan determines the pricing and cadence of the subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plan_id")
    public String planId;
    public PostSubscriptionsRequestBody withPlanId(String planId) {
        this.planId = planId;
        return this;
    }
    
    /**
     * Optionally provide a list of overrides for prices on the plan
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price_overrides")
    public Object[] priceOverrides;
    public PostSubscriptionsRequestBody withPriceOverrides(Object[] priceOverrides) {
        this.priceOverrides = priceOverrides;
        return this;
    }
    
    /**
     * The date that Orb should start billing for the subscription, localized to the customer's timezone. If this is not provided, this defaults to the current date in the customer's timezone.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("start_date")
    public LocalDate startDate;
    public PostSubscriptionsRequestBody withStartDate(LocalDate startDate) {
        this.startDate = startDate;
        return this;
    }
    
}

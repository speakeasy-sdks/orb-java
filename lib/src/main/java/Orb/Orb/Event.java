/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package Orb.Orb;

import Orb.Orb.utils.HTTPClient;
import Orb.Orb.utils.HTTPRequest;
import Orb.Orb.utils.JSON;
import Orb.Orb.utils.SerializedBody;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;

/**
 * Actions related to event management.
 */
public class Event {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Event(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    public Orb.Orb.models.operations.PutDeprecateEventsEventIdResponse deprecate(Orb.Orb.models.operations.PutDeprecateEventsEventIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = Orb.Orb.utils.Utils.generateURL(Orb.Orb.models.operations.PutDeprecateEventsEventIdRequest.class, baseUrl, "/events/{event_id}/deprecate", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Orb.Orb.models.operations.PutDeprecateEventsEventIdResponse res = new Orb.Orb.models.operations.PutDeprecateEventsEventIdResponse(contentType, httpRes.statusCode()) {{
            putDeprecateEventsEventId200ApplicationJSONObject = null;
            putDeprecateEventsEventId400ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Orb.Orb.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Orb.Orb.models.operations.PutDeprecateEventsEventId200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Orb.Orb.models.operations.PutDeprecateEventsEventId200ApplicationJSON.class);
                res.putDeprecateEventsEventId200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (Orb.Orb.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Orb.Orb.models.operations.PutDeprecateEventsEventId400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Orb.Orb.models.operations.PutDeprecateEventsEventId400ApplicationJSON.class);
                res.putDeprecateEventsEventId400ApplicationJSONObject = out;
            }
        }

        return res;
    }

    public Orb.Orb.models.operations.PostIngestResponse ingest(Orb.Orb.models.operations.PostIngestRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = Orb.Orb.utils.Utils.generateURL(baseUrl, "/ingest");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = Orb.Orb.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = Orb.Orb.utils.Utils.getQueryParams(Orb.Orb.models.operations.PostIngestRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Orb.Orb.models.operations.PostIngestResponse res = new Orb.Orb.models.operations.PostIngestResponse(contentType, httpRes.statusCode()) {{
            postIngest200ApplicationJSONObject = null;
            postIngest400ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Orb.Orb.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Orb.Orb.models.operations.PostIngest200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Orb.Orb.models.operations.PostIngest200ApplicationJSON.class);
                res.postIngest200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (Orb.Orb.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Orb.Orb.models.operations.PostIngest400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Orb.Orb.models.operations.PostIngest400ApplicationJSON.class);
                res.postIngest400ApplicationJSONObject = out;
            }
        }

        return res;
    }

    public Orb.Orb.models.operations.PostEventsSearchResponse search(Orb.Orb.models.operations.PostEventsSearchRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = Orb.Orb.utils.Utils.generateURL(baseUrl, "/events/search");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = Orb.Orb.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Orb.Orb.models.operations.PostEventsSearchResponse res = new Orb.Orb.models.operations.PostEventsSearchResponse(contentType, httpRes.statusCode()) {{
            postEventsSearch200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Orb.Orb.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Orb.Orb.models.operations.PostEventsSearch200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Orb.Orb.models.operations.PostEventsSearch200ApplicationJSON.class);
                res.postEventsSearch200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    public Orb.Orb.models.operations.PutEventsEventIdResponse update(Orb.Orb.models.operations.PutEventsEventIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = Orb.Orb.utils.Utils.generateURL(Orb.Orb.models.operations.PutEventsEventIdRequest.class, baseUrl, "/events/{event_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = Orb.Orb.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Orb.Orb.models.operations.PutEventsEventIdResponse res = new Orb.Orb.models.operations.PutEventsEventIdResponse(contentType, httpRes.statusCode()) {{
            putEventsEventId200ApplicationJSONObject = null;
            putEventsEventId400ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Orb.Orb.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Orb.Orb.models.operations.PutEventsEventId200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Orb.Orb.models.operations.PutEventsEventId200ApplicationJSON.class);
                res.putEventsEventId200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (Orb.Orb.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Orb.Orb.models.operations.PutEventsEventId400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Orb.Orb.models.operations.PutEventsEventId400ApplicationJSON.class);
                res.putEventsEventId400ApplicationJSONObject = out;
            }
        }

        return res;
    }
}
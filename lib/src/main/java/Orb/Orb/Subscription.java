/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package Orb.Orb;

import Orb.Orb.utils.HTTPClient;
import Orb.Orb.utils.HTTPRequest;
import Orb.Orb.utils.JSON;
import Orb.Orb.utils.SerializedBody;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;

/**
 * Actions related to subscription mangement.
 */
public class Subscription {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Subscription(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    public Orb.Orb.models.operations.PostSubscriptionsSubscriptionIdCancelResponse cancel(Orb.Orb.models.operations.PostSubscriptionsSubscriptionIdCancelRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = Orb.Orb.utils.Utils.generateURL(Orb.Orb.models.operations.PostSubscriptionsSubscriptionIdCancelRequest.class, baseUrl, "/subscriptions/{subscription_id}/cancel", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = Orb.Orb.utils.Utils.getQueryParams(Orb.Orb.models.operations.PostSubscriptionsSubscriptionIdCancelRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Orb.Orb.models.operations.PostSubscriptionsSubscriptionIdCancelResponse res = new Orb.Orb.models.operations.PostSubscriptionsSubscriptionIdCancelResponse(contentType, httpRes.statusCode()) {{
            subscription = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Orb.Orb.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Orb.Orb.models.shared.Subscription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Orb.Orb.models.shared.Subscription.class);
                res.subscription = out;
            }
        }

        return res;
    }

    public Orb.Orb.models.operations.PostSubscriptionsSubscriptionIdSchedulePlanChangeResponse changeSchedule(Orb.Orb.models.operations.PostSubscriptionsSubscriptionIdSchedulePlanChangeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = Orb.Orb.utils.Utils.generateURL(Orb.Orb.models.operations.PostSubscriptionsSubscriptionIdSchedulePlanChangeRequest.class, baseUrl, "/subscriptions/{subscription_id}/schedule_plan_change", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = Orb.Orb.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Orb.Orb.models.operations.PostSubscriptionsSubscriptionIdSchedulePlanChangeResponse res = new Orb.Orb.models.operations.PostSubscriptionsSubscriptionIdSchedulePlanChangeResponse(contentType, httpRes.statusCode()) {{
            subscription = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Orb.Orb.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Orb.Orb.models.shared.Subscription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Orb.Orb.models.shared.Subscription.class);
                res.subscription = out;
            }
        }

        return res;
    }

    public Orb.Orb.models.operations.PostSubscriptionsResponse create(Orb.Orb.models.operations.PostSubscriptionsRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = Orb.Orb.utils.Utils.generateURL(baseUrl, "/subscriptions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = Orb.Orb.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Orb.Orb.models.operations.PostSubscriptionsResponse res = new Orb.Orb.models.operations.PostSubscriptionsResponse(contentType, httpRes.statusCode()) {{
            subscription = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Orb.Orb.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Orb.Orb.models.shared.Subscription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Orb.Orb.models.shared.Subscription.class);
                res.subscription = out;
            }
        }

        return res;
    }

    public Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdResponse get(Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = Orb.Orb.utils.Utils.generateURL(Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdRequest.class, baseUrl, "/subscriptions/{subscription_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdResponse res = new Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdResponse(contentType, httpRes.statusCode()) {{
            subscription = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Orb.Orb.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Orb.Orb.models.shared.Subscription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Orb.Orb.models.shared.Subscription.class);
                res.subscription = out;
            }
        }

        return res;
    }

    public Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdCostResponse getCost(Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdCostRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = Orb.Orb.utils.Utils.generateURL(Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdCostRequest.class, baseUrl, "/subscriptions/{subscription_id}/costs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = Orb.Orb.utils.Utils.getQueryParams(Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdCostRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdCostResponse res = new Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdCostResponse(contentType, httpRes.statusCode()) {{
            getSubscriptionsSubscriptionIdCost200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Orb.Orb.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdCost200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdCost200ApplicationJSON.class);
                res.getSubscriptionsSubscriptionIdCost200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    public Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdScheduleResponse getSchedule(Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdScheduleRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = Orb.Orb.utils.Utils.generateURL(Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdScheduleRequest.class, baseUrl, "/subscriptions/{subscription_id}/schedule", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdScheduleResponse res = new Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdScheduleResponse(contentType, httpRes.statusCode()) {{
            getSubscriptionsSubscriptionIdSchedule200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Orb.Orb.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdSchedule200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdSchedule200ApplicationJSON.class);
                res.getSubscriptionsSubscriptionIdSchedule200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    public Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdUsageResponse getUsage(Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdUsageRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = Orb.Orb.utils.Utils.generateURL(Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdUsageRequest.class, baseUrl, "/subscriptions/{subscription_id}/usage", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = Orb.Orb.utils.Utils.getQueryParams(Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdUsageRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdUsageResponse res = new Orb.Orb.models.operations.GetSubscriptionsSubscriptionIdUsageResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    public Orb.Orb.models.operations.ListSubscriptionsResponse list(Orb.Orb.models.operations.ListSubscriptionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = Orb.Orb.utils.Utils.generateURL(baseUrl, "/subscriptions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = Orb.Orb.utils.Utils.getQueryParams(Orb.Orb.models.operations.ListSubscriptionsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Orb.Orb.models.operations.ListSubscriptionsResponse res = new Orb.Orb.models.operations.ListSubscriptionsResponse(contentType, httpRes.statusCode()) {{
            listSubscriptions200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Orb.Orb.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Orb.Orb.models.operations.ListSubscriptions200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Orb.Orb.models.operations.ListSubscriptions200ApplicationJSON.class);
                res.listSubscriptions200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    public Orb.Orb.models.operations.PostSubscriptionsSubscriptionIdUnschedulePendingPlanChangesResponse unschedule(Orb.Orb.models.operations.PostSubscriptionsSubscriptionIdUnschedulePendingPlanChangesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = Orb.Orb.utils.Utils.generateURL(Orb.Orb.models.operations.PostSubscriptionsSubscriptionIdUnschedulePendingPlanChangesRequest.class, baseUrl, "/subscriptions/{subscription_id}/unschedule_pending_plan_changes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Orb.Orb.models.operations.PostSubscriptionsSubscriptionIdUnschedulePendingPlanChangesResponse res = new Orb.Orb.models.operations.PostSubscriptionsSubscriptionIdUnschedulePendingPlanChangesResponse(contentType, httpRes.statusCode()) {{
            subscription = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Orb.Orb.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Orb.Orb.models.shared.Subscription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Orb.Orb.models.shared.Subscription.class);
                res.subscription = out;
            }
        }

        return res;
    }
}